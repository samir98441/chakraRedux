{"ast":null,"code":"// const reducer = (state, action) => {\n//   const data = action.payload;\n//   switch (action.type) {\n//     case \"LOADPRODUCTS\":\n//       return { ...state, products: data };\n//     case \"LOADCARTS\":\n//       return { ...state, cart: data };\n//     case \"ADDITEM\":\n//       const addedState = state.products;\n//       const newData = [...addedState, data];\n//       state = { ...state, products: newData };\n//       return state;\n\n//     case \"SEARCH\":\n//       return { ...state, searchValue: data, searchedItem: [] };\n\n//     case \"UPDATESEARCH\":\n//       let addedItem = [...state.searchedItem];\n//       state.products.forEach((item) => {\n//         if (item.PName.includes(state.searchValue)) {\n//           addedItem = [...addedItem, item];\n//         }\n//       });\n//       return { ...state, searchedItem: addedItem };\n\n//     case \"REMOVEITEM\":\n//       const newDeletedData = state.products.filter(\n//         (item) => item.PId !== action.payload\n//       );\n//       return { ...state, products: newDeletedData };\n\n//     case \"TOGGLE\":\n//       let newVal;\n//       let newToggle = state.products.map((item) => {\n//         if (item.PId === data) {\n//           newVal = item.UpdateToggle ? false : true;\n//           return { ...item, UpdateToggle: newVal };\n//         } else {\n//           return item;\n//         }\n//       });\n//       console.log(\"newToggle\", newToggle);\n//       return { ...state, products: newToggle };\n\n//     case \"UPDATE\":\n//       let id = action.payload.PId;\n//       console.log(\"print id\", id);\n//       let newName = action.payload.PName;\n//       let newPrice = action.payload.Price;\n\n//       let update = state.products.map((item) => {\n//         if (item.PId === id) {\n//           return {\n//             ...item,\n//             PName: newName ? newName : item.PName,\n//             Price: newPrice ? newPrice : item.Price,\n//           };\n//         } else return item;\n//       });\n//       return { ...state, products: update };\n\n//     case \"ADDTOCART\":\n//       let newCart;\n//       console.log(\"cartlength\", state.cart);\n//       if (state.cart.length !== 0) {\n//         const tempCart = state.cart.find((item) => item.PId === action.payload);\n//         if (!tempCart) {\n//           let reqItem = state.products.find(\n//             (item) => item.PId === action.payload\n//           );\n//           reqItem = { ...reqItem, quantity: 1 };\n//           newCart = [...state.cart, reqItem];\n//         } else {\n//           let nCart = { ...tempCart, quantity: tempCart.quantity + 1 };\n//           const newAddedQuantity = state.cart.filter(\n//             (item) => item.PId !== action.payload\n//           );\n//           newCart = [...newAddedQuantity, nCart];\n//         }\n//       } else {\n//         newCart = state.products.find((item) => item.PId === action.payload);\n//         newCart = [{ ...newCart, quantity: 1 }];\n//       }\n//       return { ...state, cart: newCart };\n\n//     case \"REDUCECART\":\n//       let updatedQuantity = state.cart.find(\n//         (item) => item.PId === action.payload\n//       );\n//       if (updatedQuantity.quantity > 1) {\n//         updatedQuantity = {\n//           ...updatedQuantity,\n//           quantity: updatedQuantity.quantity - 1,\n//         };\n//         let oldCart = state.cart.filter((item) => item.PId !== action.payload);\n//         return { ...state, cart: [...oldCart, updatedQuantity] };\n//       } else {\n//         let oldCart = state.cart.filter((item) => item.PId !== action.payload);\n//         return { ...state, cart: oldCart };\n//       }\n\n//     default:\n//       return state;\n//   }\n// };\n// export default reducer;","map":{"version":3,"names":[],"sources":["/home/sameer/Desktop/chakraRedux/src/reducer/reducer.js"],"sourcesContent":["// const reducer = (state, action) => {\n//   const data = action.payload;\n//   switch (action.type) {\n//     case \"LOADPRODUCTS\":\n//       return { ...state, products: data };\n//     case \"LOADCARTS\":\n//       return { ...state, cart: data };\n//     case \"ADDITEM\":\n//       const addedState = state.products;\n//       const newData = [...addedState, data];\n//       state = { ...state, products: newData };\n//       return state;\n\n//     case \"SEARCH\":\n//       return { ...state, searchValue: data, searchedItem: [] };\n\n//     case \"UPDATESEARCH\":\n//       let addedItem = [...state.searchedItem];\n//       state.products.forEach((item) => {\n//         if (item.PName.includes(state.searchValue)) {\n//           addedItem = [...addedItem, item];\n//         }\n//       });\n//       return { ...state, searchedItem: addedItem };\n\n//     case \"REMOVEITEM\":\n//       const newDeletedData = state.products.filter(\n//         (item) => item.PId !== action.payload\n//       );\n//       return { ...state, products: newDeletedData };\n\n//     case \"TOGGLE\":\n//       let newVal;\n//       let newToggle = state.products.map((item) => {\n//         if (item.PId === data) {\n//           newVal = item.UpdateToggle ? false : true;\n//           return { ...item, UpdateToggle: newVal };\n//         } else {\n//           return item;\n//         }\n//       });\n//       console.log(\"newToggle\", newToggle);\n//       return { ...state, products: newToggle };\n\n//     case \"UPDATE\":\n//       let id = action.payload.PId;\n//       console.log(\"print id\", id);\n//       let newName = action.payload.PName;\n//       let newPrice = action.payload.Price;\n\n//       let update = state.products.map((item) => {\n//         if (item.PId === id) {\n//           return {\n//             ...item,\n//             PName: newName ? newName : item.PName,\n//             Price: newPrice ? newPrice : item.Price,\n//           };\n//         } else return item;\n//       });\n//       return { ...state, products: update };\n\n//     case \"ADDTOCART\":\n//       let newCart;\n//       console.log(\"cartlength\", state.cart);\n//       if (state.cart.length !== 0) {\n//         const tempCart = state.cart.find((item) => item.PId === action.payload);\n//         if (!tempCart) {\n//           let reqItem = state.products.find(\n//             (item) => item.PId === action.payload\n//           );\n//           reqItem = { ...reqItem, quantity: 1 };\n//           newCart = [...state.cart, reqItem];\n//         } else {\n//           let nCart = { ...tempCart, quantity: tempCart.quantity + 1 };\n//           const newAddedQuantity = state.cart.filter(\n//             (item) => item.PId !== action.payload\n//           );\n//           newCart = [...newAddedQuantity, nCart];\n//         }\n//       } else {\n//         newCart = state.products.find((item) => item.PId === action.payload);\n//         newCart = [{ ...newCart, quantity: 1 }];\n//       }\n//       return { ...state, cart: newCart };\n\n//     case \"REDUCECART\":\n//       let updatedQuantity = state.cart.find(\n//         (item) => item.PId === action.payload\n//       );\n//       if (updatedQuantity.quantity > 1) {\n//         updatedQuantity = {\n//           ...updatedQuantity,\n//           quantity: updatedQuantity.quantity - 1,\n//         };\n//         let oldCart = state.cart.filter((item) => item.PId !== action.payload);\n//         return { ...state, cart: [...oldCart, updatedQuantity] };\n//       } else {\n//         let oldCart = state.cart.filter((item) => item.PId !== action.payload);\n//         return { ...state, cart: oldCart };\n//       }\n\n//     default:\n//       return state;\n//   }\n// };\n// export default reducer;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}