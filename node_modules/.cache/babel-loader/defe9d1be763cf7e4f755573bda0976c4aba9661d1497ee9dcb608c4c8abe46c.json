{"ast":null,"code":"import { createAction, createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  products: []\n};\nexport const loadProducts = createAction(\"loadProducts\");\nexport const addProducts = createAction(\"addProducts\");\nexport const updateProducts = createAction(\"updateProducts\");\nexport const updateFormToggle = createAction(\"updateFormToggle\");\nexport const productsSlice = createSlice({\n  name: \"products\",\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(loadProducts, (state, action) => {\n      var _JSON$parse;\n      state.products = (_JSON$parse = JSON.parse(localStorage.getItem(\"products\"))) !== null && _JSON$parse !== void 0 ? _JSON$parse : [];\n    });\n    builder.addCase(addProducts, (state, action) => {\n      const addedState = state.products;\n      state.products = [...addedState, action.payload];\n    });\n    builder.addCase(updateProducts, (state, action) => {\n      let id = action.payload.PId;\n      let newName = action.payload.PName;\n      let newPrice = action.payload.Price;\n      let updatedProducts = state.products.map(item => {\n        if (item.PId === id) {\n          return {\n            ...item,\n            PName: newName ? newName : item.PName,\n            Price: newPrice ? newPrice : item.Price\n          };\n        } else return item;\n      });\n      state.products = updatedProducts;\n    });\n    builder.addCase(updateFormToggle, (state, action) => {\n      let newVal;\n      let newToggle = state.products.map(item => {\n        if (item.PId === action.payload) {\n          newVal = item.UpdateToggle ? false : true;\n          return {\n            ...item,\n            UpdateToggle: newVal\n          };\n        } else {\n          return item;\n        }\n      });\n      state.products = newToggle;\n    });\n  }\n});\nconst ProductsReducer = productsSlice.reducer;\nexport default ProductsReducer;","map":{"version":3,"names":["createAction","createSlice","initialState","products","loadProducts","addProducts","updateProducts","updateFormToggle","productsSlice","name","reducers","extraReducers","builder","addCase","state","action","JSON","parse","localStorage","getItem","addedState","payload","id","PId","newName","PName","newPrice","Price","updatedProducts","map","item","newVal","newToggle","UpdateToggle","ProductsReducer","reducer"],"sources":["/home/sameer/Desktop/chakraRedux/src/store/slices/productsSlice.js"],"sourcesContent":["import { createAction, createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  products: [],\n};\n\nexport const loadProducts = createAction(\"loadProducts\");\nexport const addProducts = createAction(\"addProducts\");\nexport const updateProducts = createAction(\"updateProducts\");\nexport const updateFormToggle = createAction(\"updateFormToggle\");\n\nexport const productsSlice = createSlice({\n  name: \"products\",\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder.addCase(loadProducts, (state, action) => {\n      state.products = JSON.parse(localStorage.getItem(\"products\")) ?? [];\n    });\n    builder.addCase(addProducts, (state, action) => {\n      const addedState = state.products;\n      state.products = [...addedState, action.payload];\n    });\n    builder.addCase(updateProducts, (state, action) => {\n      let id = action.payload.PId;\n      let newName = action.payload.PName;\n      let newPrice = action.payload.Price;\n\n      let updatedProducts = state.products.map((item) => {\n        if (item.PId === id) {\n          return {\n            ...item,\n            PName: newName ? newName : item.PName,\n            Price: newPrice ? newPrice : item.Price,\n          };\n        } else return item;\n      });\n      state.products = updatedProducts;\n    });\n    builder.addCase(updateFormToggle, (state, action) => {\n      let newVal;\n      let newToggle = state.products.map((item) => {\n        if (item.PId === action.payload) {\n          newVal = item.UpdateToggle ? false : true;\n          return { ...item, UpdateToggle: newVal };\n        } else {\n          return item;\n        }\n      });\n      state.products = newToggle;\n    });\n  },\n});\n\nconst ProductsReducer = productsSlice.reducer;\nexport default ProductsReducer;\n"],"mappings":"AAAA,SAASA,YAAY,EAAEC,WAAW,QAAQ,kBAAkB;AAE5D,MAAMC,YAAY,GAAG;EACnBC,QAAQ,EAAE;AACZ,CAAC;AAED,OAAO,MAAMC,YAAY,GAAGJ,YAAY,CAAC,cAAc,CAAC;AACxD,OAAO,MAAMK,WAAW,GAAGL,YAAY,CAAC,aAAa,CAAC;AACtD,OAAO,MAAMM,cAAc,GAAGN,YAAY,CAAC,gBAAgB,CAAC;AAC5D,OAAO,MAAMO,gBAAgB,GAAGP,YAAY,CAAC,kBAAkB,CAAC;AAEhE,OAAO,MAAMQ,aAAa,GAAGP,WAAW,CAAC;EACvCQ,IAAI,EAAE,UAAU;EAChBP,YAAY;EACZQ,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CAACC,OAAO,CAACT,YAAY,EAAE,CAACU,KAAK,EAAEC,MAAM,KAAK;MAAA;MAC/CD,KAAK,CAACX,QAAQ,kBAAGa,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC,qDAAI,EAAE;IACrE,CAAC,CAAC;IACFP,OAAO,CAACC,OAAO,CAACR,WAAW,EAAE,CAACS,KAAK,EAAEC,MAAM,KAAK;MAC9C,MAAMK,UAAU,GAAGN,KAAK,CAACX,QAAQ;MACjCW,KAAK,CAACX,QAAQ,GAAG,CAAC,GAAGiB,UAAU,EAAEL,MAAM,CAACM,OAAO,CAAC;IAClD,CAAC,CAAC;IACFT,OAAO,CAACC,OAAO,CAACP,cAAc,EAAE,CAACQ,KAAK,EAAEC,MAAM,KAAK;MACjD,IAAIO,EAAE,GAAGP,MAAM,CAACM,OAAO,CAACE,GAAG;MAC3B,IAAIC,OAAO,GAAGT,MAAM,CAACM,OAAO,CAACI,KAAK;MAClC,IAAIC,QAAQ,GAAGX,MAAM,CAACM,OAAO,CAACM,KAAK;MAEnC,IAAIC,eAAe,GAAGd,KAAK,CAACX,QAAQ,CAAC0B,GAAG,CAAEC,IAAI,IAAK;QACjD,IAAIA,IAAI,CAACP,GAAG,KAAKD,EAAE,EAAE;UACnB,OAAO;YACL,GAAGQ,IAAI;YACPL,KAAK,EAAED,OAAO,GAAGA,OAAO,GAAGM,IAAI,CAACL,KAAK;YACrCE,KAAK,EAAED,QAAQ,GAAGA,QAAQ,GAAGI,IAAI,CAACH;UACpC,CAAC;QACH,CAAC,MAAM,OAAOG,IAAI;MACpB,CAAC,CAAC;MACFhB,KAAK,CAACX,QAAQ,GAAGyB,eAAe;IAClC,CAAC,CAAC;IACFhB,OAAO,CAACC,OAAO,CAACN,gBAAgB,EAAE,CAACO,KAAK,EAAEC,MAAM,KAAK;MACnD,IAAIgB,MAAM;MACV,IAAIC,SAAS,GAAGlB,KAAK,CAACX,QAAQ,CAAC0B,GAAG,CAAEC,IAAI,IAAK;QAC3C,IAAIA,IAAI,CAACP,GAAG,KAAKR,MAAM,CAACM,OAAO,EAAE;UAC/BU,MAAM,GAAGD,IAAI,CAACG,YAAY,GAAG,KAAK,GAAG,IAAI;UACzC,OAAO;YAAE,GAAGH,IAAI;YAAEG,YAAY,EAAEF;UAAO,CAAC;QAC1C,CAAC,MAAM;UACL,OAAOD,IAAI;QACb;MACF,CAAC,CAAC;MACFhB,KAAK,CAACX,QAAQ,GAAG6B,SAAS;IAC5B,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;AAEF,MAAME,eAAe,GAAG1B,aAAa,CAAC2B,OAAO;AAC7C,eAAeD,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}