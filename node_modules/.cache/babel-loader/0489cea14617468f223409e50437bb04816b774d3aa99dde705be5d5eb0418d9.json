{"ast":null,"code":"import { createAction, createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  products: [{}],\n  formToggle: {\n    id: \"\",\n    value: false\n  }\n};\nexport const loadProducts = createAction(\"loadProducts\");\nexport const addProducts = createAction(\"addProducts\");\nexport const updateProducts = createAction(\"updateProducts\");\nexport const updateFormToggle = createAction(\"updateFormToggle\");\nexport const productsSlice = createSlice({\n  name: \"products\",\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(loadProducts, (state, action) => {\n      var _JSON$parse;\n      state.products = (_JSON$parse = JSON.parse(localStorage.getItem(\"products\"))) !== null && _JSON$parse !== void 0 ? _JSON$parse : [];\n      console.log(\"k vara idyp\", state.products);\n    });\n    builder.addCase(addProducts, (state, action) => {\n      const addedState = state.products;\n      const tempVale = action.payload;\n      console.log(\"inside addproducts\", tempVale);\n      const tempProduct = [...addedState, tempVale];\n      state.products = [...tempProduct];\n    });\n    builder.addCase(updateProducts, (state, action) => {\n      let id = action.payload.PId;\n      let newName = action.payload.PName;\n      let newPrice = action.payload.Price;\n      let updatedProducts = state.products.map(item => {\n        if (item.PId === id) {\n          return {\n            ...item,\n            PName: newName ? newName : item.PName,\n            Price: newPrice ? newPrice : item.Price\n          };\n        } else return item;\n      });\n      state.products = updatedProducts;\n    });\n    builder.addCase(updateFormToggle, (state, action) => {\n      state.formToggle = !state.formToggle;\n    });\n  }\n});\nconst ProductsReducer = productsSlice.reducer;\nexport default ProductsReducer;","map":{"version":3,"names":["createAction","createSlice","initialState","products","formToggle","id","value","loadProducts","addProducts","updateProducts","updateFormToggle","productsSlice","name","reducers","extraReducers","builder","addCase","state","action","JSON","parse","localStorage","getItem","console","log","addedState","tempVale","payload","tempProduct","PId","newName","PName","newPrice","Price","updatedProducts","map","item","ProductsReducer","reducer"],"sources":["/home/sameer/Desktop/chakraRedux/src/store/slices/productsSlice.js"],"sourcesContent":["import { createAction, createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  products: [{}],\n  formToggle: {\n    id: \"\",\n    value: false,\n  },\n};\n\nexport const loadProducts = createAction(\"loadProducts\");\nexport const addProducts = createAction(\"addProducts\");\nexport const updateProducts = createAction(\"updateProducts\");\nexport const updateFormToggle = createAction(\"updateFormToggle\");\n\nexport const productsSlice = createSlice({\n  name: \"products\",\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder.addCase(loadProducts, (state, action) => {\n      state.products = JSON.parse(localStorage.getItem(\"products\")) ?? [];\n      console.log(\"k vara idyp\", state.products);\n    });\n    builder.addCase(addProducts, (state, action) => {\n      const addedState = state.products;\n\n      const tempVale = action.payload;\n      console.log(\"inside addproducts\", tempVale);\n      const tempProduct = [...addedState, tempVale];\n      state.products = [...tempProduct];\n    });\n    builder.addCase(updateProducts, (state, action) => {\n      let id = action.payload.PId;\n      let newName = action.payload.PName;\n      let newPrice = action.payload.Price;\n\n      let updatedProducts = state.products.map((item) => {\n        if (item.PId === id) {\n          return {\n            ...item,\n            PName: newName ? newName : item.PName,\n            Price: newPrice ? newPrice : item.Price,\n          };\n        } else return item;\n      });\n      state.products = updatedProducts;\n    });\n    builder.addCase(updateFormToggle, (state, action) => {\n      state.formToggle = !state.formToggle;\n    });\n  },\n});\n\nconst ProductsReducer = productsSlice.reducer;\nexport default ProductsReducer;\n"],"mappings":"AAAA,SAASA,YAAY,EAAEC,WAAW,QAAQ,kBAAkB;AAE5D,MAAMC,YAAY,GAAG;EACnBC,QAAQ,EAAE,CAAC,CAAC,CAAC,CAAC;EACdC,UAAU,EAAE;IACVC,EAAE,EAAE,EAAE;IACNC,KAAK,EAAE;EACT;AACF,CAAC;AAED,OAAO,MAAMC,YAAY,GAAGP,YAAY,CAAC,cAAc,CAAC;AACxD,OAAO,MAAMQ,WAAW,GAAGR,YAAY,CAAC,aAAa,CAAC;AACtD,OAAO,MAAMS,cAAc,GAAGT,YAAY,CAAC,gBAAgB,CAAC;AAC5D,OAAO,MAAMU,gBAAgB,GAAGV,YAAY,CAAC,kBAAkB,CAAC;AAEhE,OAAO,MAAMW,aAAa,GAAGV,WAAW,CAAC;EACvCW,IAAI,EAAE,UAAU;EAChBV,YAAY;EACZW,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CAACC,OAAO,CAACT,YAAY,EAAE,CAACU,KAAK,EAAEC,MAAM,KAAK;MAAA;MAC/CD,KAAK,CAACd,QAAQ,kBAAGgB,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC,qDAAI,EAAE;MACnEC,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEP,KAAK,CAACd,QAAQ,CAAC;IAC5C,CAAC,CAAC;IACFY,OAAO,CAACC,OAAO,CAACR,WAAW,EAAE,CAACS,KAAK,EAAEC,MAAM,KAAK;MAC9C,MAAMO,UAAU,GAAGR,KAAK,CAACd,QAAQ;MAEjC,MAAMuB,QAAQ,GAAGR,MAAM,CAACS,OAAO;MAC/BJ,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEE,QAAQ,CAAC;MAC3C,MAAME,WAAW,GAAG,CAAC,GAAGH,UAAU,EAAEC,QAAQ,CAAC;MAC7CT,KAAK,CAACd,QAAQ,GAAG,CAAC,GAAGyB,WAAW,CAAC;IACnC,CAAC,CAAC;IACFb,OAAO,CAACC,OAAO,CAACP,cAAc,EAAE,CAACQ,KAAK,EAAEC,MAAM,KAAK;MACjD,IAAIb,EAAE,GAAGa,MAAM,CAACS,OAAO,CAACE,GAAG;MAC3B,IAAIC,OAAO,GAAGZ,MAAM,CAACS,OAAO,CAACI,KAAK;MAClC,IAAIC,QAAQ,GAAGd,MAAM,CAACS,OAAO,CAACM,KAAK;MAEnC,IAAIC,eAAe,GAAGjB,KAAK,CAACd,QAAQ,CAACgC,GAAG,CAAEC,IAAI,IAAK;QACjD,IAAIA,IAAI,CAACP,GAAG,KAAKxB,EAAE,EAAE;UACnB,OAAO;YACL,GAAG+B,IAAI;YACPL,KAAK,EAAED,OAAO,GAAGA,OAAO,GAAGM,IAAI,CAACL,KAAK;YACrCE,KAAK,EAAED,QAAQ,GAAGA,QAAQ,GAAGI,IAAI,CAACH;UACpC,CAAC;QACH,CAAC,MAAM,OAAOG,IAAI;MACpB,CAAC,CAAC;MACFnB,KAAK,CAACd,QAAQ,GAAG+B,eAAe;IAClC,CAAC,CAAC;IACFnB,OAAO,CAACC,OAAO,CAACN,gBAAgB,EAAE,CAACO,KAAK,EAAEC,MAAM,KAAK;MACnDD,KAAK,CAACb,UAAU,GAAG,CAACa,KAAK,CAACb,UAAU;IACtC,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;AAEF,MAAMiC,eAAe,GAAG1B,aAAa,CAAC2B,OAAO;AAC7C,eAAeD,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}